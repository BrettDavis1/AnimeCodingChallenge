<?xml version="1.0" encoding="utf-8"?>
<!--
~ Copyright (C) 2019 The Android Open Source Project
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~      http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->

<resources>

    <!--Color-->

    <!--Material uses an organized approach to applying color by -->
    <!--providing a set of attributes which define semantically named -->
    <!--colors for generalized UI concepts such as backgrounds, -->
    <!--surfaces, type and icons. Using these attributes throughout -->
    <!--your app makes it easy to change a single color, or the -->
    <!--entire theme, and have those changes cascade through the interface.-->

    <!--Color is customized by overriding Material Components color -->
    <!--attributes with custom color values. In this project, your theme’s -->
    <!--color attributes are already overridden with default values -->
    <!--defined in this file, colors.xml. This file holds the color palette -->
    <!--for both light and dark themes of the Material baseline (default) -->
    <!--theme. Next to each color is a comment describing the semantic theme -->
    <!--color attribute which the palette color maps to.-->

    <!--Replace the colors here with your own brand's palette and ensure -->
    <!--they are applied as desired in both light and dark theme -->
    <!--(values/themes.xml and values-night/themes.xml). For more -->
    <!--information on color palettes and their application color -->
    <!--theme attributes, see https://www.youtube.com/watch?v=Owkf8DhAOSo-->

    <!--Color palette-->

    <color name="purple_200">#bb86fc</color> <!--Color primary (dark)-->
    <color name="purple_500">#6200ee</color> <!--Color primary (light)-->
    <color name="purple_600">#4b01d0</color> <!--Color primary variant (dark)-->
    <color name="purple_700">#3700b3</color> <!--Color primary variant (light)-->

    <color name="green_200">#03dac6</color> <!--Color secondary-->
    <color name="green_500">#018786</color> <!--Color secondary variant-->

    <color name="red_200">#cf6679</color> <!--Color error (dark)-->
    <color name="red_600">#b00020</color> <!--Color error (light)-->

    <!--Color surface (light), color on error (light), -->
    <!--color on surface (dark), color on surface (dark)-->
    <color name="white_50">#ffffff</color>

    <color name="black_800">#121212</color> <!--Color surface (dark)-->
    <!--Color on secondary (light), color on background (light),-->
    <!--color on surface (light)-->
    <color name="black_900">#000000</color>
    <color name="yellow_300">#ffff00</color>
    <color name="yellow_500">#e6e600</color>
    <color name="red_500">#ff3300</color>
    <color name="red_100">#ff0000</color>
    <color name="lowes_blue">#2929a3</color>

</resources>

<!--<resources>-->

<!--&lt;!&ndash;Typography&ndash;&gt;-->

<!--&lt;!&ndash;Material’s type system supports 13 categories that, when combined, form the typescale. &ndash;&gt;-->
<!--&lt;!&ndash;This typescale is evident in the variety of text styles and sizes that appear on screen, &ndash;&gt;-->
<!--&lt;!&ndash;ranging from body copy to buttons. Type appears across the UI, in places such as in &ndash;&gt;-->
<!--&lt;!&ndash;components and on surfaces.&ndash;&gt;-->

<!--&lt;!&ndash;These styles should be used throughout your app when creating text views so all your &ndash;&gt;-->
<!--&lt;!&ndash;text is consistently styled and easily updated if design or product needs change. Each &ndash;&gt;-->
<!--&lt;!&ndash;style in the type scale can be customized by defining a style and overriding that &ndash;&gt;-->
<!--&lt;!&ndash;style's Material Theme attribute (?textAppearanceHeadline1, ?textAppearanceBody2, etc.) &ndash;&gt;-->
<!--&lt;!&ndash;in your app's theme. In this project, type attributes have already been overridden in &ndash;&gt;-->
<!--&lt;!&ndash;themes.xml and are set to the styles in this file, type.xml. These ?textAppearance* &ndash;&gt;-->
<!--&lt;!&ndash;theme attributes should be used in your layouts to set a TextView’s appearance instead &ndash;&gt;-->
<!--&lt;!&ndash;of fully qualified style references and in favor of manually setting text properties.&ndash;&gt;-->

<!--&lt;!&ndash;Type on Android is themed by defining a custom TextAppearance for each type scale style. &ndash;&gt;-->
<!--&lt;!&ndash;Use standard TextAppearance attributes such as textSize, textColor, fontFamily, &ndash;&gt;-->
<!--&lt;!&ndash;letterSpacing, etc. to define a custom appearance for each and see how they are &ndash;&gt;-->
<!--&lt;!&ndash;applied globally across your app.&ndash;&gt;-->

<!--<style name="TextAppearance.MyTheme.Headline1" parent="TextAppearance.MaterialComponents.Headline1">-->
<!--    &lt;!&ndash;Your custom type style here&ndash;&gt;-->
<!--    <item name="android:textSize">76sp</item>-->
<!--    <item name="android:textStyle">bold</item>-->
<!--</style>-->

<!--<style name="TextAppearance.MyTheme.Headline2" parent="TextAppearance.MaterialComponents.Headline2">-->
<!--    &lt;!&ndash;Your custom type style here&ndash;&gt;-->
<!--    <item name="android:textStyle"> italic</item>-->
<!--</style>-->

<!--<style name="TextAppearance.MyTheme.Headline3" parent="TextAppearance.MaterialComponents.Headline3">-->
<!--    &lt;!&ndash;Your custom type style here&ndash;&gt;-->
<!--    <item name="fontFamily">cursive</item>-->
<!--</style>-->

<!--<style name="TextAppearance.MyTheme.Headline4" parent="TextAppearance.MaterialComponents.Headline4">-->
<!--    &lt;!&ndash;Your custom type style here&ndash;&gt;-->
<!--</style>-->

<!--<style name="TextAppearance.MyTheme.Headline5" parent="TextAppearance.MaterialComponents.Headline5">-->
<!--    &lt;!&ndash;Your custom type style here&ndash;&gt;-->
<!--</style>-->

<!--<style name="TextAppearance.MyTheme.Headline6" parent="TextAppearance.MaterialComponents.Headline6">-->
<!--    &lt;!&ndash;Your custom type style here&ndash;&gt;-->
<!--</style>-->

<!--<style name="TextAppearance.MyTheme.Subtitle1" parent="TextAppearance.MaterialComponents.Subtitle1">-->
<!--    &lt;!&ndash;Your custom type style here&ndash;&gt;-->
<!--    <item name="textAllCaps">true</item>-->
<!--</style>-->

<!--<style name="TextAppearance.MyTheme.Subtitle2" parent="TextAppearance.MaterialComponents.Subtitle2">-->
<!--    &lt;!&ndash;Your custom type style here&ndash;&gt;-->
<!--</style>-->

<!--<style name="TextAppearance.MyTheme.Body1" parent="TextAppearance.MaterialComponents.Body1">-->
<!--    &lt;!&ndash;Your custom type style here&ndash;&gt;-->
<!--</style>-->

<!--<style name="TextAppearance.MyTheme.Body2" parent="TextAppearance.MaterialComponents.Body2">-->
<!--    &lt;!&ndash;Your custom type style here&ndash;&gt;-->
<!--</style>-->

<!--<style name="TextAppearance.MyTheme.Button" parent="TextAppearance.MaterialComponents.Button">-->
<!--    &lt;!&ndash;Your custom type style here&ndash;&gt;-->
<!--    <item name="fontFamily">cursive</item>-->
<!--    <item name="android:textSize">150sp</item>-->
<!--</style>-->

<!--<style name="TextAppearance.MyTheme.Caption" parent="TextAppearance.MaterialComponents.Caption">-->
<!--    &lt;!&ndash;Your custom type style here&ndash;&gt;-->
<!--</style>-->

<!--<style name="TextAppearance.MyTheme.Overline" parent="TextAppearance.MaterialComponents.Overline">-->
<!--    &lt;!&ndash;Your custom type style here&ndash;&gt;-->
<!--</style>-->

<!--</resources>-->
